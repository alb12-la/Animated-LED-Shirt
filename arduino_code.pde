/**
* Created by Alberto Lerdo
* Nov/2015
**/

#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#include <SoftwareSerial.h>
bool wireless=true;

/* Saved Text */

String s1="HI_THERE";
String s2="IF.YOU_WANNA_CHAT";
String s3="I_AM_FROM";
String s4="HAVE_YOU_BEEN";
String s5="THERE_?";
String s6="_OK?";
String s7="HAV-_ING A_DRINK.";
String s8="I_WORK_AS A";
String s9="_WOMAN";
String s10="I'M_"; 
String s11="";
String s12="Really?";
String s13="I_DON'T_DRINK";
String s14="WHEN_I'M_BEING?";
String s15="I'M_NEW_IN";
String s16="LOS_ANGE-_LES";
String s17="I_AM_FROM";
String s18="Whats your name?";
String s19="Whats your name?";
String s20="Whats your name?";
String s21="Whats your name?";

/* Saved Text */

uint16_t BLACK  = 0x0000;
uint16_t BLUE   =  0x001F;
uint16_t RED     = 0xF800;
uint16_t GREEN    = 0x07E0;
uint16_t CYAN     = 0x07FF;
uint16_t MAGENTA = 0xF81F;
uint16_t YELLOW  = 0xFFE0;
uint16_t WHITE   = 0xFFFF; // Uses the most power

/* Set colors */
#define heartColor WHITE
#define textColorTop MAGENTA
#define textColorBottom MAGENTA
#define backgroundColor BLACK
#define BRIGHTNESS 12

int frameRate(150);

/////////// MATRIX INIT/////////////////////
#define TOP 12
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, 1, 3, TOP,
                            NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
                            NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG +
                            NEO_TILE_TOP       + NEO_TILE_LEFT +
                            NEO_TILE_COLUMNS   + NEO_TILE_PROGRESSIVE, NEO_GRB + NEO_KHZ800);

//////////BITMAP ARRAYS////////////////////
const   PROGMEM uint8_t heartBeatArr [2][96] = {{
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x3,0xf0,0xf,0xc0,
0x7,0xf8,0x1f,0xe0,
0xf,0xfc,0x3f,0xf0,
0x1f,0xfe,0x7f,0xf8,
0x3f,0xff,0xff,0xfc,
0x3f,0xff,0xff,0xfc,
0x3f,0xff,0xff,0xfc,
0x3f,0xff,0xff,0xfc,
0x1f,0xff,0xff,0xf8,
0xf,0xff,0xff,0xf0,
0x7,0xff,0xff,0xe0,
0x3,0xff,0xff,0xc0,
0x1,0xff,0xff,0x80,
0x0,0xff,0xff,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0x3f,0xfc,0x0,
0x0,0x1f,0xf8,0x0,
0x0,0xf,0xf0,0x0,
0x0,0x7,0xe0,0x0,
0x0,0x3,0xc0,0x0,
0x0,0x1,0x80,0x0,
0x0,0x0,0x0,0x0
}
, {
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x78,0x1e,0x0,
0x0,0xfc,0x3f,0x0,
0x1,0xfe,0x7f,0x80,
0x1,0xff,0xff,0x80,
0x3,0xff,0xff,0xc0,
0x3,0xff,0xff,0xc0,
0x1,0xff,0xff,0x80,
0x0,0xff,0xff,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0x3f,0xfc,0x0,
0x0,0x1f,0xf8,0x0,
0x0,0xf,0xf0,0x0,
0x0,0x7,0xe0,0x0,
0x0,0x3,0xc0,0x0,
0x0,0x1,0x80,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0
}
};



const PROGMEM uint8_t heartBreakArr [] = {
0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,
0x3,0xf0,0xf,0xc0,
0x7,0xf8,0x1f,0xe0,
0xf,0xfc,0x3f,0xf0,
0x1f,0xfe,0x7f,0xf8,
0x3f,0xfe,0x3f,0xfc,
0x3f,0xff,0x3f,0xfc,
0x3f,0xff,0x9f,0xfc,
0x3f,0xff,0x8f,0xfc,
0x1f,0xff,0x8f,0xf8,
0xf,0xff,0x8f,0xf0,
0x7,0xff,0xf,0xe0,
0x3,0xfe,0xf,0xc0,
0x1,0xf8,0x3f,0x80,
0x0,0xf0,0xff,0x0,
0x0,0x71,0xfe,0x0,
0x0,0x33,0xfc,0x0,
0x0,0x13,0xf8,0x0,
0x0,0x3,0xf0,0x0,
0x0,0x1,0xe0,0x0,
0x0,0x1,0xc0,0x0,
0x0,0x1,0x80,0x0,
0x0,0x0,0x0,0x0
};

const PROGMEM uint8_t emotiArr [2][96]  = {{
0x0,0x0,0x0,0x0,
0x0,0xf,0xf0,0x0,
0x0,0x1f,0xfc,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0xff,0xff,0x0,
0x1,0xff,0xff,0x80,
0x1,0xe7,0xe7,0x80,
0x3,0xf7,0xf7,0xc0,
0x7,0xc7,0xc7,0xc0,
0x7,0xc7,0xc7,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0x80,0x1,0xc0,
0x3,0x80,0x1,0xc0,
0x1,0xc0,0x3,0xc0,
0x1,0xf0,0xf,0x80,
0x0,0xf8,0x1f,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0x1f,0xf8,0x0,
0x0,0x7,0xf0,0x0,
0x0,0x0,0x0,0x0}
,{
0x0,0x0,0x0,0x0,
0x0,0xf,0xf0,0x0,
0x0,0x1f,0xfc,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0xff,0xff,0x0,
0x1,0xff,0xff,0x80,
0x1,0xff,0xe7,0x80,
0x3,0xff,0xf7,0xc0,
0x7,0xc7,0xc7,0xc0,
0x7,0xff,0xc7,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0xff,0xff,0xe0,
0x7,0x80,0x1,0xc0,
0x3,0x80,0x1,0xc0,
0x1,0xc0,0x3,0xc0,
0x1,0xf0,0xf,0x80,
0x0,0xf8,0x1f,0x0,
0x0,0x7f,0xfe,0x0,
0x0,0x1f,0xf8,0x0,
0x0,0x7,0xf0,0x0,
0x0,0x0,0x0,0x0
}
};

////////VARIABLES FOR TIME AND TEXT////////////
unsigned long currentMill;
int inchar = 0;
String incomingText;
int frameState = 0;
int brightness;
long previousMill = 0;
/////////////////////////////////////////////

void setup() {
  Serial.begin(9600);
  Serial.setTimeout(11);
  Serial.println("SERIAL ACTIVE");
  incomingText.reserve(200);
  // Initialize all Neopixels to 'off'
  matrix.begin();           
  // WARNING BE CAREFUL ADJUSTING THESE VALUES
  matrix.setBrightness(BRIGHTNESS);  // Keep colors dim
  matrix.setTextWrap(false); // Text wraps to new line
  matrix.setTextColor(0xF81F); // Hex color
  matrix.setCursor(0, 0); // X,Y position of top left text pixelx`
  matrix.setTextSize(1); // Text Size;
}

void loop() {
  Serial.flush();
  currentMill = millis();
  if (Serial.available() > 0) {
    inchar = Serial.read();
  }
 
/** Key Mapping **/
  switch (inchar) {
    case 'z':
    Serial.println("HEART_ANIMATION");
      heart();
      break;

    case 'b':
      heartBreak();
      Serial.println("HEART_BREAK");
      break;
  
    case ' ':
      matrix.fillScreen(backgroundColor);
      matrix.show();
      break;

    case '[':
      Serial.println("ENTERING TEXT MODE");
      readText();
      break;
    
     case 'a':
           printScripted("LANG-_UAGE",'_');
           break;
     case 's':
           printScripted("I AM_NEW_IN LA",'_');
           break;
       case 'd':
           printScripted("WHAT_IS_THE",'_');
           break;
       case 'f':
           printScripted("BEST_CLUB_?",'_');
           break;
      case 'g'://I work as A
           printScripted("WHAT_CAN_I DO",'_');
           break;
       case 'h'://subtitled
            printScripted("I AM_GLAD_YOU",'_');
           break;
       case 'j':
           printScripted("WANT_TO_READ",'_');
           break;
       case 'k':
           printScripted("MY_SUBS",'_');
           break;
        case 'l':
           printScripted(s9,'_');
           break;
 
    case 49://1
          speak(0);
           break;
    case 50://2
          speak(1);
          break;
    case 51://3
             speak(2);
          break;
    case 52://4
             speak(3);
          break;
    case 53://5
            speak(4);
          break;
    case 54://6
             speak(5);
          break;
    case 55://7
           speak2(0);
           break;
    case 56://8
           speak2(1);
           break;
    case 57://9
            speak2(2);
           break;
    
    case 48://0
        speak2(3);
         break; 
        case 'q'://9
          speak2(4);
          break;
        case 'w'://really?
          speak2(5);
          break;
        case'e'://9
           speak2(6);
          break;
        case 'r'://9
                speak3(0);
          break;
        case 't'://9
                    speak3(1);
          break;
        case 'y'://9
                    printScripted("I_DON'T_DRINK",'_');
          break;
        case 'u'://9
                 printScripted("WHEN_I_AM",'_');

          break;
        case 'i'://9
                  speak2(7);
                  break;
        case 'o'://9
                  printScripted("THAT_LINE_WON'T",'_');
                  break;
        case 'p'://9
          printScripted("WORK_IN_ANY",'_');
          break;
           /////CAPS
            case 'Q'://9
          printScripted("I_HEARD_YOU",'_');
          break;
  }
};
 
void printScripted(String toPrint, char div){
       matrix.fillScreen(backgroundColor);
      printCenterText(getValue(toPrint, div, 0),0);
      printCenterText(getValue(toPrint, div, 1),1);
      printCenterText(getValue(toPrint, div, 2),2);
      matrix.show();

}
  
void heartBreak()
{
  if (currentMill - previousMill > frameRate)
  {
    previousMill = currentMill;
    if (frameState == 0) {
      matrix.begin();//Wipe current animation
      matrix.fillScreen(backgroundColor);
      matrix.drawBitmap(0, 0, heartBeatArr [0], 32, 24, MAGENTA  );
      matrix.show();
      frameState = 1;
    }
    else
    {
      matrix.fillScreen(backgroundColor);
      matrix.drawBitmap(0, 0, heartBreakArr, 32, 24, MAGENTA);
      matrix.show();
      frameState = 0;
    }
  }
}
